'use client';

import { useState, useEffect, useRef } from 'react';
import * as api from '../lib/api';
import { marked } from 'marked';
import FileUpload from '../components/FileUpload';

export default function Home() {
  const [conversations, setConversations] = useState([]);
  const [projects, setProjects] = useState([]);
  const [activeConversation, setActiveConversation] = useState(null);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const [model, setModel] = useState('claude-sonnet-4-20250514');
  const [showNewProject, setShowNewProject] = useState(false);
  const [newProjectName, setNewProjectName] = useState('');
  const [showExportMenu, setShowExportMenu] = useState(false);

  // File upload state
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [uploadedFileIds, setUploadedFileIds] = useState([]);

  // Search state
  const [searchQuery, setSearchQuery] = useState('');
  const [searchActive, setSearchActive] = useState(false);
  const [currentMatchIndex, setCurrentMatchIndex] = useState(0);
  const [totalMatches, setTotalMatches] = useState(0);

  // Title editing state
  const [editingTitle, setEditingTitle] = useState(false);
  const [editedTitle, setEditedTitle] = useState('');
  const [editingSidebarId, setEditingSidebarId] = useState(null);
  const [editedSidebarTitle, setEditedSidebarTitle] = useState('');

  const messagesEndRef = useRef(null);
  const messageRefs = useRef({});
  const titleInputRef = useRef(null);
  const sidebarInputRef = useRef(null);

  const models = [
    { id: 'claude-3-5-haiku-20241022', name: 'Haiku 3.5', cost: '$1/$5' },
    { id: 'claude-sonnet-4-20250514', name: 'Sonnet 4', cost: '$3/$15' },
    { id: 'claude-opus-4-20250514', name: 'Opus 4', cost: '$15/$75' },
  ];

  useEffect(() => {
    loadConversations();
    loadProjects();
  }, []);

  useEffect(() => {
    if (activeConversation) {
      loadMessages(activeConversation.id);
      setSearchQuery('');
      setSearchActive(false);
      setCurrentMatchIndex(0);
      setTotalMatches(0);
    }
  }, [activeConversation]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (searchQuery.trim() && searchActive) {
      highlightMatches();
    } else {
      clearHighlights();
    }
  }, [searchQuery, searchActive, messages, currentMatchIndex]);

  // Focus input when editing starts
  useEffect(() => {
    if (editingTitle && titleInputRef.current) {
      titleInputRef.current.focus();
      titleInputRef.current.select();
    }
  }, [editingTitle]);

  useEffect(() => {
    if (editingSidebarId && sidebarInputRef.current) {
      sidebarInputRef.current.focus();
      sidebarInputRef.current.select();
    }
  }, [editingSidebarId]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const loadProjects = async () => {
    try {
      const data = await api.fetchProjects();
      setProjects(data);
    } catch (error) {
      console.error('Failed to load projects:', error);
    }
  };

  const loadConversations = async () => {
    try {
      const data = await api.fetchConversations();
      setConversations(data);
      if (data.length > 0 && !activeConversation) {
        setActiveConversation(data[0]);
      }
    } catch (error) {
      console.error('Failed to load conversations:', error);
    }
  };

  const loadMessages = async (conversationId) => {
    try {
      const data = await api.getMessages(conversationId);
      setMessages(data);
    } catch (error) {
      console.error('Failed to load messages:', error);
    }
  };

  const createNewConversation = async () => {
    try {
      const conv = await api.createConversation('New Chat', model);
      setConversations([conv, ...conversations]);
      setActiveConversation(conv);
      setMessages([]);
    } catch (error) {
      console.error('Failed to create conversation:', error);
    }
  };

  const handleCreateProject = async (e) => {
    e.preventDefault();
    if (!newProjectName.trim()) return;

    try {
      const project = await api.createProject(newProjectName.trim());
      setProjects([...projects, project]);
      setNewProjectName('');
      setShowNewProject(false);
    } catch (error) {
      console.error('Failed to create project:', error);
      alert('Failed to create project');
    }
  };

  const handleAssignToProject = async (conversationId, projectId) => {
    try {
      await api.assignConversationToProject(conversationId, projectId);
      await loadConversations();
    } catch (error) {
      console.error('Failed to assign conversation:', error);
      alert('Failed to assign conversation to project');
    }
  };

  // Title editing functions
  const startEditingTitle = () => {
    if (!activeConversation) return;
    setEditedTitle(activeConversation.title);
    setEditingTitle(true);
  };

  const cancelEditingTitle = () => {
    setEditingTitle(false);
    setEditedTitle('');
  };

  const saveTitle = async () => {
    if (!activeConversation || !editedTitle.trim()) {
      cancelEditingTitle();
      return;
    }

    try {
      const updated = await api.updateConversationTitle(activeConversation.id, editedTitle.trim());
      setActiveConversation(updated);
      setConversations(prev =>
        prev.map(c => c.id === updated.id ? updated : c)
      );
      setEditingTitle(false);
    } catch (error) {
      console.error('Failed to update title:', error);
      alert('Failed to update title');
    }
  };

  const handleTitleKeyDown = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      saveTitle();
    } else if (e.key === 'Escape') {
      cancelEditingTitle();
    }
  };

  // Sidebar title editing
  const startEditingSidebarTitle = (conv, e) => {
    e.stopPropagation();
    setEditingSidebarId(conv.id);
    setEditedSidebarTitle(conv.title);
  };

  const cancelEditingSidebarTitle = () => {
    setEditingSidebarId(null);
    setEditedSidebarTitle('');
  };

  const saveSidebarTitle = async (convId) => {
    if (!editedSidebarTitle.trim()) {
      cancelEditingSidebarTitle();
      return;
    }

    try {
      const updated = await api.updateConversationTitle(convId, editedSidebarTitle.trim());
      setConversations(prev =>
        prev.map(c => c.id === updated.id ? updated : c)
      );
      if (activeConversation?.id === convId) {
        setActiveConversation(updated);
      }
      setEditingSidebarId(null);
    } catch (error) {
      console.error('Failed to update title:', error);
      alert('Failed to update title');
    }
  };

  const handleSidebarTitleKeyDown = (convId, e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      saveSidebarTitle(convId);
    } else if (e.key === 'Escape') {
      cancelEditingSidebarTitle();
    }
  };

  // File handling functions
  const handleFilesSelected = async (files) => {
    setSelectedFiles(prev => [...prev, ...files]);
  };

  const handleRemoveFile = (index) => {
    setSelectedFiles(prev => prev.filter((_, i) => i !== index));
    setUploadedFileIds(prev => prev.filter((_, i) => i !== index));
  };

  const uploadFiles = async () => {
    if (selectedFiles.length === 0) return [];

    const formData = new FormData();
    selectedFiles.forEach(file => {
      formData.append('files', file);
    });

    try {
      const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://192.168.1.8:8001';
      const response = await fetch(`${API_URL}/api/upload`, {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error('File upload failed');
      }

      const data = await response.json();
      return data.files.map(f => f.id);
    } catch (error) {
      console.error('Upload error:', error);
      throw error;
    }
  };

  // Export conversation function
  const handleExportConversation = async (conversationId, format = 'markdown') => {
    try {
      const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://192.168.1.8:8001';
      const response = await fetch(`${API_URL}/api/conversations/${conversationId}/export?format=${format}`);
      
      if (!response.ok) {
        throw new Error('Export failed');
      }
      
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      
      const extension = format === 'json' ? 'json' : 'md';
      a.download = `conversation_${new Date().toISOString().split('T')[0]}.${extension}`;
      
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (error) {
      console.error('Export error:', error);
      alert('Failed to export conversation');
    }
  };

  // Bulk export project conversations
  const handleBulkExport = async (projectId, projectName) => {
    try {
      const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://192.168.1.8:8001';
      const response = await fetch(`${API_URL}/api/conversations/project/${projectId}/export?format=markdown`);
      
      if (!response.ok) {
        throw new Error('Bulk export failed');
      }
      
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${projectName.replace(/[^a-z0-9]/gi, '_')}_export_${new Date().toISOString().split('T')[0]}.zip`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (error) {
      console.error('Bulk export error:', error);
      alert('Failed to export project');
    }
  };

  // Generate global usage report
  const handleGenerateReport = async () => {
    try {
      const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://192.168.1.8:8001';
      const response = await fetch(`${API_URL}/api/conversations/report/usage`);
      
      if (!response.ok) {
        throw new Error('Report generation failed');
      }
      
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `claude_max_usage_report_${new Date().toISOString().split('T')[0]}.csv`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (error) {
      console.error('Report generation error:', error);
      alert('Failed to generate usage report');
    }
  };

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!input.trim() || !activeConversation || loading) return;

    const userMessage = input.trim();
    const isFirstMessage = messages.length === 0;
    setLoading(true);

    try {
      // Upload files first if any
      let fileIds = [];
      if (selectedFiles.length > 0) {
        fileIds = await uploadFiles();
        setUploadedFileIds(fileIds);
      }

      const tempUserMsg = {
        role: 'user',
        content: userMessage,
        created_at: new Date().toISOString(),
        files: selectedFiles.map(f => ({ original_filename: f.name, mime_type: f.type }))
      };
      
      setMessages(prev => [...prev, tempUserMsg]);
      setInput('');
      setSelectedFiles([]);

      const response = await api.sendMessage(activeConversation.id, userMessage, model, fileIds);

      setMessages(prev => {
        const filtered = prev.filter(m => m.id);
        return [...filtered,
          { ...tempUserMsg, id: 'user-' + Date.now() },
          response.message
        ];
      });

      setActiveConversation(response.conversation);
      setConversations(prev =>
        prev.map(c => c.id === response.conversation.id ? response.conversation : c)
      );

      // Auto-generate title if this was the first message
      if (isFirstMessage && activeConversation.title === 'New Chat') {
        try {
          const updated = await api.generateConversationTitle(activeConversation.id, userMessage);
          setActiveConversation(updated);
          setConversations(prev =>
            prev.map(c => c.id === updated.id ? updated : c)
          );
        } catch (titleError) {
          console.error('Failed to generate title:', titleError);
        }
      }
    } catch (error) {
      console.error('Failed to send message:', error);
      alert('Failed to send message: ' + error.message);
      setMessages(prev => prev.filter(m => !m.files || m.id));
    } finally {
      setLoading(false);
      setUploadedFileIds([]);
    }
  };

  const handleDeleteConversation = async (id) => {
    if (!confirm('Delete this conversation?')) return;
    try {
      await api.deleteConversation(id);
      const filtered = conversations.filter(c => c.id !== id);
      setConversations(filtered);
      if (activeConversation?.id === id) {
        setActiveConversation(filtered[0] || null);
        setMessages([]);
      }
    } catch (error) {
      console.error('Failed to delete conversation:', error);
    }
  };

  // Search functions
  const highlightMatches = () => {
    const query = searchQuery.toLowerCase().trim();
    if (!query) return;

    let matchCount = 0;
    const messagesContainer = document.getElementById('messages-container');
    if (!messagesContainer) return;

    clearHighlights();

    const walker = document.createTreeWalker(
      messagesContainer,
      NodeFilter.SHOW_TEXT,
      {
        acceptNode: (node) => {
          const parent = node.parentElement;
          if (!parent || parent.tagName === 'MARK' || parent.tagName === 'SCRIPT' || parent.tagName === 'STYLE') {
            return NodeFilter.FILTER_REJECT;
          }
          return NodeFilter.FILTER_ACCEPT;
        }
      }
    );

    const nodesToReplace = [];
    let node;
    while (node = walker.nextNode()) {
      const text = node.textContent || '';
      const lowerText = text.toLowerCase();
      if (lowerText.includes(query)) {
        nodesToReplace.push(node);
      }
    }

    nodesToReplace.forEach(node => {
      const text = node.textContent || '';
      const lowerText = text.toLowerCase();
      const parts = [];
      let lastIndex = 0;
      let index = lowerText.indexOf(query);

      while (index !== -1) {
        if (index > lastIndex) {
          parts.push(document.createTextNode(text.substring(lastIndex, index)));
        }

        const mark = document.createElement('mark');
        mark.className = matchCount === currentMatchIndex
          ? 'search-highlight-current bg-yellow-400 text-black px-0.5 rounded font-semibold'
          : 'search-highlight bg-yellow-200 text-black px-0.5 rounded';
        mark.textContent = text.substring(index, index + query.length);
        mark.dataset.matchIndex = matchCount;
        parts.push(mark);

        matchCount++;
        lastIndex = index + query.length;
        index = lowerText.indexOf(query, lastIndex);
      }

      if (lastIndex < text.length) {
        parts.push(document.createTextNode(text.substring(lastIndex)));
      }

      const parent = node.parentElement;
      if (parent) {
        const fragment = document.createDocumentFragment();
        parts.forEach(part => fragment.appendChild(part));
        parent.replaceChild(fragment, node);
      }
    });

    setTotalMatches(matchCount);

    if (matchCount > 0) {
      scrollToMatch(currentMatchIndex);
    }
  };

  const clearHighlights = () => {
    const highlights = document.querySelectorAll('.search-highlight, .search-highlight-current');
    highlights.forEach(mark => {
      const parent = mark.parentElement;
      if (parent) {
        parent.replaceChild(document.createTextNode(mark.textContent || ''), mark);
        parent.normalize();
      }
    });
    setTotalMatches(0);
  };

  const scrollToMatch = (index) => {
    const highlights = document.querySelectorAll('.search-highlight, .search-highlight-current');
    if (highlights[index]) {
      highlights[index].scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  };

  const handleSearchChange = (e) => {
    const value = e.target.value;
    setSearchQuery(value);
    setCurrentMatchIndex(0);
    if (value.trim()) {
      setSearchActive(true);
    } else {
      setSearchActive(false);
    }
  };

  const navigateToNextMatch = () => {
    if (totalMatches > 0) {
      const nextIndex = (currentMatchIndex + 1) % totalMatches;
      setCurrentMatchIndex(nextIndex);
      scrollToMatch(nextIndex);
    }
  };

  const navigateToPrevMatch = () => {
    if (totalMatches > 0) {
      const prevIndex = currentMatchIndex === 0 ? totalMatches - 1 : currentMatchIndex - 1;
      setCurrentMatchIndex(prevIndex);
      scrollToMatch(prevIndex);
    }
  };

  const handleSearchKeyDown = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      if (e.shiftKey) {
        navigateToPrevMatch();
      } else {
        navigateToNextMatch();
      }
    } else if (e.key === 'Escape') {
      setSearchQuery('');
      setSearchActive(false);
    }
  };

  const formatCost = (cost) => {
    return `$${Number(cost).toFixed(4)}`;
  };

  const formatTokens = (tokens) => {
    return tokens?.toLocaleString() || '0';
  };

  // Group conversations by project
  const conversationsByProject = {};
  const uncategorized = [];

  conversations.forEach(conv => {
    if (conv.project_id) {
      if (!conversationsByProject[conv.project_id]) {
        conversationsByProject[conv.project_id] = [];
      }
      conversationsByProject[conv.project_id].push(conv);
    } else {
      uncategorized.push(conv);
    }
  });

  return (
    <div className="flex h-screen bg-gray-900 text-gray-100">
      {/* Sidebar */}
      <div className="w-64 bg-gray-800 border-r border-gray-700 flex flex-col">
        <div className="p-4 border-b border-gray-700">
          <h1 className="text-xl font-bold text-blue-400">Claude Max</h1>
          <p className="text-xs text-gray-400 mt-1">Unlimited AI Power</p>
        </div>

        <div className="p-4 space-y-2">
          <button
            onClick={createNewConversation}
            className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition"
          >
            + New Chat
          </button>

          <button
            onClick={() => setShowNewProject(!showNewProject)}
            className="w-full bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg transition text-sm"
          >
            + New Project
          </button>

          {showNewProject && (
            <form onSubmit={handleCreateProject} className="mt-2">
              <input
                type="text"
                value={newProjectName}
                onChange={(e) => setNewProjectName(e.target.value)}
                placeholder="Project name..."
                className="w-full bg-gray-700 border border-gray-600 rounded px-3 py-2 text-sm mb-2"
                autoFocus
              />
              <div className="flex gap-2">
                <button
                  type="submit"
                  className="flex-1 bg-green-600 hover:bg-green-700 text-white py-1 px-3 rounded text-sm"
                >
                  Create
                </button>
                <button
                  type="button"
                  onClick={() => {
                    setShowNewProject(false);
                    setNewProjectName('');
                  }}
                  className="flex-1 bg-gray-600 hover:bg-gray-700 text-white py-1 px-3 rounded text-sm"
                >
                  Cancel
                </button>
              </div>
            </form>
          )}
        </div>

        <div className="flex-1 overflow-y-auto">
          {/* Projects with conversations */}
          {projects.map(project => {
            const projectConvs = conversationsByProject[project.id] || [];
            if (projectConvs.length === 0) return null;

            return (
              <div key={project.id} className="mb-2">
                <div className="px-3 py-2 text-xs font-semibold text-gray-400 flex items-center justify-between group">
                  <div className="flex items-center gap-2">
                    <span>{project.icon}</span>
                    <span>{project.name}</span>
                    <span className="text-gray-500">({projectConvs.length})</span>
                  </div>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      handleBulkExport(project.id, project.name);
                    }}
                    className="opacity-0 group-hover:opacity-100 transition-opacity text-green-400 hover:text-green-300"
                    title="Export all conversations in this project"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                  </button>
                </div>
                {projectConvs.map(conv => (
                  <div
                    key={conv.id}
                    onClick={() => setActiveConversation(conv)}
                    className={`p-3 mx-2 my-1 rounded cursor-pointer transition ${
                      activeConversation?.id === conv.id
                        ? 'bg-gray-700'
                        : 'hover:bg-gray-700'
                    }`}
                  >
                    {editingSidebarId === conv.id ? (
                      <input
                        ref={sidebarInputRef}
                        type="text"
                        value={editedSidebarTitle}
                        onChange={(e) => setEditedSidebarTitle(e.target.value)}
                        onKeyDown={(e) => handleSidebarTitleKeyDown(conv.id, e)}
                        onBlur={() => saveSidebarTitle(conv.id)}
                        onClick={(e) => e.stopPropagation()}
                        className="w-full bg-gray-600 border border-blue-500 rounded px-2 py-1 text-sm font-medium"
                      />
                    ) : (
                      <div
                        className="text-sm font-medium truncate flex items-center gap-1 group"
                        onDoubleClick={(e) => startEditingSidebarTitle(conv, e)}
                      >
                        <span className="flex-1 truncate">{conv.title}</span>
                        <button
                          onClick={(e) => startEditingSidebarTitle(conv, e)}
                          className="opacity-0 group-hover:opacity-100 transition-opacity"
                          title="Rename"
                        >
                          <svg className="w-3 h-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                          </svg>
                        </button>
                      </div>
                    )}
                    <div className="text-xs text-gray-400 mt-1">
                      {formatCost(conv.total_cost)} • {formatTokens(conv.total_input_tokens + conv.total_output_tokens)} tokens
                    </div>
                    <div className="flex gap-2 mt-2">
                      <select
                        value={conv.project_id || ''}
                        onChange={(e) => {
                          e.stopPropagation();
                          handleAssignToProject(conv.id, e.target.value || null);
                        }}
                        className="flex-1 bg-gray-600 text-xs rounded px-2 py-1"
                        onClick={(e) => e.stopPropagation()}
                      >
                        <option value="">No Project</option>
                        {projects.map(p => (
                          <option key={p.id} value={p.id}>{p.icon} {p.name}</option>
                        ))}
                      </select>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          handleDeleteConversation(conv.id);
                        }}
                        className="text-xs text-red-400 hover:text-red-300"
                      >
                        Del
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            );
          })}

          {/* Uncategorized conversations */}
          {uncategorized.length > 0 && (
            <div className="mb-2">
              <div className="px-3 py-2 text-xs font-semibold text-gray-400">
                📂 Uncategorized ({uncategorized.length})
              </div>
              {uncategorized.map(conv => (
                <div
                  key={conv.id}
                  onClick={() => setActiveConversation(conv)}
                  className={`p-3 mx-2 my-1 rounded cursor-pointer transition ${
                    activeConversation?.id === conv.id
                      ? 'bg-gray-700'
                      : 'hover:bg-gray-700'
                  }`}
                >
                  {editingSidebarId === conv.id ? (
                    <input
                      ref={sidebarInputRef}
                      type="text"
                      value={editedSidebarTitle}
                      onChange={(e) => setEditedSidebarTitle(e.target.value)}
                      onKeyDown={(e) => handleSidebarTitleKeyDown(conv.id, e)}
                      onBlur={() => saveSidebarTitle(conv.id)}
                      onClick={(e) => e.stopPropagation()}
                      className="w-full bg-gray-600 border border-blue-500 rounded px-2 py-1 text-sm font-medium"
                    />
                  ) : (
                    <div
                      className="text-sm font-medium truncate flex items-center gap-1 group"
                      onDoubleClick={(e) => startEditingSidebarTitle(conv, e)}
                    >
                      <span className="flex-1 truncate">{conv.title}</span>
                      <button
                        onClick={(e) => startEditingSidebarTitle(conv, e)}
                        className="opacity-0 group-hover:opacity-100 transition-opacity"
                        title="Rename"
                      >
                        <svg className="w-3 h-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                        </svg>
                      </button>
                    </div>
                  )}
                  <div className="text-xs text-gray-400 mt-1">
                    {formatCost(conv.total_cost)} • {formatTokens(conv.total_input_tokens + conv.total_output_tokens)} tokens
                  </div>
                  <div className="flex gap-2 mt-2">
                    <select
                      value={conv.project_id || ''}
                      onChange={(e) => {
                        e.stopPropagation();
                        handleAssignToProject(conv.id, e.target.value || null);
                      }}
                      className="flex-1 bg-gray-600 text-xs rounded px-2 py-1"
                      onClick={(e) => e.stopPropagation()}
                    >
                      <option value="">No Project</option>
                      {projects.map(p => (
                        <option key={p.id} value={p.id}>{p.icon} {p.name}</option>
                      ))}
                    </select>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        handleDeleteConversation(conv.id);
                      }}
                      className="text-xs text-red-400 hover:text-red-300"
                    >
                      Del
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        <div className="p-4 border-t border-gray-700 text-xs text-gray-400">
          <div>Model: {models.find(m => m.id === model)?.name}</div>
          {activeConversation && (
            <div className="mt-2">
              <div>Total Cost: {formatCost(activeConversation.total_cost)}</div>
              <div>Tokens: {formatTokens(activeConversation.total_input_tokens + activeConversation.total_output_tokens)}</div>
            </div>
          )}
        </div>
      </div>

      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col">
        {/* Header with Search */}
        <div className="bg-gray-800 border-b border-gray-700 p-4">
          <div className="flex justify-between items-center mb-3">
            <div className="flex items-center gap-3 flex-1">
              {editingTitle ? (
                <input
                  ref={titleInputRef}
                  type="text"
                  value={editedTitle}
                  onChange={(e) => setEditedTitle(e.target.value)}
                  onKeyDown={handleTitleKeyDown}
                  onBlur={saveTitle}
                  className="flex-1 bg-gray-700 border border-blue-500 rounded px-3 py-1 text-lg font-semibold"
                />
              ) : (
                <>
                  <h2
                    className="text-xl font-semibold cursor-pointer hover:text-blue-400 transition flex items-center gap-2 group"
                    onClick={startEditingTitle}
                    title="Click to rename"
                  >
                    {activeConversation?.title || 'Select a conversation'}
                    {activeConversation && (
                      <svg className="w-4 h-4 text-gray-500 group-hover:text-blue-400 transition" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                      </svg>
                    )}
                  </h2>
                  {activeConversation && (
                    <div className="relative">
                      <button
                        onClick={() => setShowExportMenu(!showExportMenu)}
                        className="px-3 py-1 bg-green-600 hover:bg-green-700 text-white text-sm rounded-lg transition flex items-center gap-2"
                        title="Export conversation"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        Export
                        <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                        </svg>
                      </button>
                      
                      {showExportMenu && (
                        <div className="absolute top-full mt-1 right-0 bg-gray-700 border border-gray-600 rounded-lg shadow-lg z-50 min-w-[150px]">
                          <button
                            onClick={() => {
                              handleExportConversation(activeConversation.id, 'markdown');
                              setShowExportMenu(false);
                            }}
                            className="w-full text-left px-4 py-2 hover:bg-gray-600 text-sm first:rounded-t-lg"
                          >
                            📝 Markdown
                          </button>
                          <button
                            onClick={() => {
                              handleExportConversation(activeConversation.id, 'json');
                              setShowExportMenu(false);
                            }}
                            className="w-full text-left px-4 py-2 hover:bg-gray-600 text-sm last:rounded-b-lg"
                          >
                            📦 JSON
                          </button>
                        </div>
                      )}
                    </div>
                  )}
                </>
              )}
            </div>
            <div className="flex gap-2 items-center">
              <select
                value={model}
                onChange={(e) => setModel(e.target.value)}
                className="bg-gray-700 border border-gray-600 rounded px-3 py-1 text-sm"
              >
                {models.map(m => (
                  <option key={m.id} value={m.id}>
                    {m.name} ({m.cost})
                  </option>
                ))}
              </select>
              <button
                onClick={handleGenerateReport}
                className="px-3 py-1 bg-purple-600 hover:bg-purple-700 text-white text-sm rounded-lg transition flex items-center gap-2"
                title="Generate global usage report (CSV)"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
                Report
              </button>
            </div>
          </div>

          {/* Search Bar */}
          {messages.length > 0 && (
            <div className="flex items-center gap-2 bg-gray-700 rounded-lg p-2">
              <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
              <input
                type="text"
                value={searchQuery}
                onChange={handleSearchChange}
                onKeyDown={handleSearchKeyDown}
                placeholder="Search in conversation... (Enter to navigate, Esc to clear)"
                className="flex-1 bg-transparent border-none focus:outline-none text-sm"
              />
              {totalMatches > 0 && (
                <>
                  <span className="text-xs text-gray-400 whitespace-nowrap">
                    {currentMatchIndex + 1} of {totalMatches}
                  </span>
                  <button
                    onClick={navigateToPrevMatch}
                    className="p-1 hover:bg-gray-600 rounded"
                    title="Previous match (Shift+Enter)"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
                    </svg>
                  </button>
                  <button
                    onClick={navigateToNextMatch}
                    className="p-1 hover:bg-gray-600 rounded"
                    title="Next match (Enter)"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                    </svg>
                  </button>
                </>
              )}
              {searchQuery && (
                <button
                  onClick={() => {
                    setSearchQuery('');
                    setSearchActive(false);
                  }}
                  className="p-1 hover:bg-gray-600 rounded"
                  title="Clear search (Esc)"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              )}
            </div>
          )}
        </div>

        {/* Messages */}
        <div id="messages-container" className="flex-1 overflow-y-auto">
          {messages.map((msg, idx) => (
            <div
              key={msg.id || idx}
              ref={el => messageRefs.current[msg.id || idx] = el}
              className={`border-b border-gray-800 ${
                msg.role === 'user'
                  ? 'bg-gray-800/50'
                  : 'bg-gray-900'
              }`}
            >
              <div className="max-w-[90%] mx-auto px-6 py-6">
                {msg.role === 'user' ? (
                  <div className="flex justify-end">
                    <div className="bg-blue-600 rounded-2xl px-5 py-3 max-w-2xl">
                      {msg.files && msg.files.length > 0 && (
                        <div className="mb-2 flex flex-wrap gap-2">
                          {msg.files.map((file, fileIdx) => (
                            <div key={fileIdx} className="text-xs bg-blue-700 rounded px-2 py-1 flex items-center gap-1">
                              <span>{file.original_filename || file.filename}</span>
                            </div>
                          ))}
                        </div>
                      )}
                      <div className="text-white whitespace-pre-wrap break-words text-xl">
                        {msg.content}
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-4">
                    <div
                      className="prose prose-xl prose-invert prose-pre:bg-gray-800 prose-pre:text-gray-100 max-w-none prose-p:leading-relaxed prose-headings:font-semibold"
                      dangerouslySetInnerHTML={{
                        __html: marked.parse(msg.content || '')
                      }}
                    />
                    {msg.cost > 0 && (
                      <div className="flex items-center gap-3 text-xs text-gray-500 pt-2 border-t border-gray-800">
                        <span>{formatCost(msg.cost)}</span>
                        <span>•</span>
                        <span>{formatTokens(msg.input_tokens)} in</span>
                        <span>•</span>
                        <span>{formatTokens(msg.output_tokens)} out</span>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          ))}

          {loading && (
            <div className="border-b border-gray-800 bg-gray-900">
              <div className="max-w-[90%] mx-auto px-6 py-6">
                <div className="flex space-x-2">
                  <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* Input Area */}
        <div className="bg-gray-800 border-t border-gray-700 p-4">
          <div className="max-w-[90%] mx-auto">
            <FileUpload
              onFilesSelected={handleFilesSelected}
              selectedFiles={selectedFiles}
              onRemoveFile={handleRemoveFile}
            />
            <form onSubmit={handleSendMessage} className="flex gap-2">
              <input
                type="text"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="Message Claude..."
                disabled={loading || !activeConversation}
                className="flex-1 bg-gray-700 border border-gray-600 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
              />
              <button
                type="submit"
                disabled={loading || !activeConversation || !input.trim()}
                className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg transition disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Send
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
}